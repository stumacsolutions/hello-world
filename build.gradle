buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath('gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17')
        classpath('info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.10')
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE')
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'spring-boot'

apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'info.solidsoft.pitest'

group = 'hello'
version = 'latest'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-hateoas')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.data:spring-data-rest-hal-browser')
    testCompile('info.cukes:cucumber-java:1.2.4')
    testCompile('info.cukes:cucumber-junit:1.2.4')
    testCompile('info.cukes:cucumber-spring:1.2.4')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

jar {
    baseName = 'hello-world'
    version = 'latest'
}

pitest {
    mutationThreshold = 100
    timestampedReports = false
}

springBoot  {
    buildInfo()
}

test {
    exclude 'acceptance/**'
}

task acceptanceTest(type: Test) {
    include 'acceptance/**'
}

task assembleContainer(dependsOn: assemble) {
    doLast {
        exec {
            commandLine 'docker', 'build', '-t', 'stumacsolutions/hello-world-container', '.'
        }
    }
}

task checkStyle() {
    dependsOn {
        tasks.findAll { 
            task -> task.name.startsWith('checkstyle')
        }
    }
}

task findBugs() {
    dependsOn {
        tasks.findAll { 
            task -> task.name.startsWith('findbugs')
        }
    }
}

task mutationTest() {
    dependsOn {
        tasks.findAll {
            task -> task.name.equals('pitest')
        }
    }
}

task publishContainer(dependsOn: assembleContainer) {
    doLast {
        exec {
            commandLine 'docker', 'login', '-e', System.getenv('DOCKER_EMAIL'), '-u', System.getenv('DOCKER_USER'), '-p', System.getenv('DOCKER_PASS')
        }
        exec {
            commandLine 'docker', 'push', 'stumacsolutions/hello-world-container'
        }
    }
}

task publishTag() {
    doLast {
        exec {
            commandLine 'git', 'tag', '-a', System.getenv('SNAP_PIPELINE_COUNTER'), '-m', '"Publishing git tag."'
        }
        exec {
            commandLine 'git', 'push', 'origin', System.getenv('SNAP_PIPELINE_COUNTER')
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
